import {
  useTheme
} from "./chunk-JVDTBYWX.js";
import {
  inputIconTheme,
  inputTheme
} from "./chunk-ADIUZG7W.js";

// src/components/input.tsx
import * as React from "react";
import { twMerge } from "tailwind-merge";
import { jsx, jsxs } from "react/jsx-runtime";
var InputContext = React.createContext({
  size: "md",
  color: "primary",
  isError: false,
  isSuccess: false,
  iconPlacement: "start",
  isIconDefined: false,
  isPill: false,
  disabled: false,
  setIconPlacement: () => null,
  setIsIconDefined: () => null
});
function InputRootBase({
  as,
  color,
  size,
  isPill,
  isError,
  isSuccess,
  disabled,
  className,
  children,
  type = "text",
  ...props
}, ref) {
  const Component = as ?? "div";
  const contextTheme = useTheme();
  const theme = contextTheme?.input ?? inputTheme;
  const defaultProps = theme?.defaultProps;
  const [isIconDefined, setIsIconDefined] = React.useState(false);
  const [iconPlacement, setIconPlacement] = React.useState("start");
  size ??= defaultProps?.size ?? "md";
  color ??= defaultProps?.color ?? "primary";
  isPill ??= defaultProps?.isPill ?? false;
  isError ??= defaultProps?.isError ?? false;
  isSuccess ??= defaultProps?.isSuccess ?? false;
  const styles = twMerge(
    theme.baseStyle,
    theme.size[size],
    theme.color[color],
    className,
    "peer"
  );
  const contextValue = React.useMemo(
    () => ({
      size,
      color,
      isError,
      isSuccess,
      iconPlacement,
      isIconDefined,
      disabled,
      isPill,
      setIconPlacement,
      setIsIconDefined
    }),
    [
      size,
      color,
      isError,
      isSuccess,
      iconPlacement,
      isIconDefined,
      disabled,
      isPill,
      setIconPlacement,
      setIsIconDefined
    ]
  );
  const inputType = [
    "text",
    "email",
    "password",
    "search",
    "number",
    "tel",
    "url",
    "hidden"
  ].includes(type) ? type : "text";
  return /* @__PURE__ */ jsx(Component, { className: "relative w-full", children: /* @__PURE__ */ jsxs(InputContext.Provider, { value: contextValue, children: [
    /* @__PURE__ */ jsx(
      "input",
      {
        ...props,
        ref,
        type: inputType,
        className: styles,
        disabled,
        "data-error": isError,
        "data-success": isSuccess,
        "data-shape": isPill ? "pill" : "default",
        "data-icon-placement": isIconDefined ? iconPlacement : ""
      }
    ),
    children
  ] }) });
}
InputRootBase.displayName = "MaterialTailwind.Input";
var InputRoot = React.forwardRef(InputRootBase);
function InputIconRoot({ as, placement, ...props }, ref) {
  const Component = as ?? "span";
  const contextTheme = useTheme();
  const {
    size,
    iconPlacement,
    setIconPlacement,
    setIsIconDefined,
    isError,
    isSuccess,
    disabled
  } = React.useContext(InputContext);
  const theme = contextTheme?.inputIcon ?? inputIconTheme;
  const defaultProps = theme?.defaultProps;
  placement ??= defaultProps?.placement ?? "start";
  React.useEffect(() => {
    setIsIconDefined(true);
    return () => {
      setIsIconDefined(false);
    };
  }, []);
  React.useEffect(() => {
    setIconPlacement(placement);
    return () => {
      setIconPlacement("start");
    };
  }, [placement]);
  const styles = twMerge(theme.baseStyle, theme.size[size], props?.className);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref,
      className: styles,
      "data-error": isError,
      "data-success": isSuccess,
      "aria-disabled": disabled,
      "data-placement": iconPlacement
    }
  );
}
InputIconRoot.displayName = "MaterialTailwind.InputIcon";
var InputIcon = React.forwardRef(InputIconRoot);
var Input = Object.assign(InputRoot, {
  Icon: InputIcon
});
var input_default = Input;

export {
  InputContext,
  InputRoot,
  InputIcon,
  Input,
  input_default
};
