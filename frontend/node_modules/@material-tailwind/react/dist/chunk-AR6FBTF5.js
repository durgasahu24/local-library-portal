import {
  __commonJS,
  __toESM
} from "./chunk-AXCKF2IS.js";

// ../../node_modules/.pnpm/tailwindcss@3.4.13/node_modules/tailwindcss/lib/util/createPlugin.js
var require_createPlugin = __commonJS({
  "../../node_modules/.pnpm/tailwindcss@3.4.13/node_modules/tailwindcss/lib/util/createPlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    function createPlugin(plugin2, config) {
      return {
        handler: plugin2,
        config
      };
    }
    createPlugin.withOptions = function(pluginFunction, configFunction = () => ({})) {
      const optionsFunction = function(options) {
        return {
          __options: options,
          handler: pluginFunction(options),
          config: configFunction(options)
        };
      };
      optionsFunction.__isOptionsFunction = true;
      optionsFunction.__pluginFunction = pluginFunction;
      optionsFunction.__configFunction = configFunction;
      return optionsFunction;
    };
    var _default = createPlugin;
  }
});

// ../../node_modules/.pnpm/tailwindcss@3.4.13/node_modules/tailwindcss/lib/public/create-plugin.js
var require_create_plugin = __commonJS({
  "../../node_modules/.pnpm/tailwindcss@3.4.13/node_modules/tailwindcss/lib/public/create-plugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    var _createPlugin = /* @__PURE__ */ _interop_require_default(require_createPlugin());
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var _default = _createPlugin.default;
  }
});

// ../../node_modules/.pnpm/tailwindcss@3.4.13/node_modules/tailwindcss/plugin.js
var require_plugin = __commonJS({
  "../../node_modules/.pnpm/tailwindcss@3.4.13/node_modules/tailwindcss/plugin.js"(exports, module) {
    "use strict";
    var createPlugin = require_create_plugin();
    module.exports = (createPlugin.__esModule ? createPlugin : { default: createPlugin }).default;
  }
});

// ../../node_modules/.pnpm/tailwindcss-animate@1.0.7_tailwindcss@3.4.13/node_modules/tailwindcss-animate/index.js
var require_tailwindcss_animate = __commonJS({
  "../../node_modules/.pnpm/tailwindcss-animate@1.0.7_tailwindcss@3.4.13/node_modules/tailwindcss-animate/index.js"(exports, module) {
    "use strict";
    var plugin2 = require_plugin();
    function filterDefault(values) {
      return Object.fromEntries(
        Object.entries(values).filter(([key]) => key !== "DEFAULT")
      );
    }
    module.exports = plugin2(
      ({ addUtilities, matchUtilities, theme }) => {
        addUtilities({
          "@keyframes enter": theme("keyframes.enter"),
          "@keyframes exit": theme("keyframes.exit"),
          ".animate-in": {
            animationName: "enter",
            animationDuration: theme("animationDuration.DEFAULT"),
            "--tw-enter-opacity": "initial",
            "--tw-enter-scale": "initial",
            "--tw-enter-rotate": "initial",
            "--tw-enter-translate-x": "initial",
            "--tw-enter-translate-y": "initial"
          },
          ".animate-out": {
            animationName: "exit",
            animationDuration: theme("animationDuration.DEFAULT"),
            "--tw-exit-opacity": "initial",
            "--tw-exit-scale": "initial",
            "--tw-exit-rotate": "initial",
            "--tw-exit-translate-x": "initial",
            "--tw-exit-translate-y": "initial"
          }
        });
        matchUtilities(
          {
            "fade-in": (value) => ({ "--tw-enter-opacity": value }),
            "fade-out": (value) => ({ "--tw-exit-opacity": value })
          },
          { values: theme("animationOpacity") }
        );
        matchUtilities(
          {
            "zoom-in": (value) => ({ "--tw-enter-scale": value }),
            "zoom-out": (value) => ({ "--tw-exit-scale": value })
          },
          { values: theme("animationScale") }
        );
        matchUtilities(
          {
            "spin-in": (value) => ({ "--tw-enter-rotate": value }),
            "spin-out": (value) => ({ "--tw-exit-rotate": value })
          },
          { values: theme("animationRotate") }
        );
        matchUtilities(
          {
            "slide-in-from-top": (value) => ({
              "--tw-enter-translate-y": `-${value}`
            }),
            "slide-in-from-bottom": (value) => ({
              "--tw-enter-translate-y": value
            }),
            "slide-in-from-left": (value) => ({
              "--tw-enter-translate-x": `-${value}`
            }),
            "slide-in-from-right": (value) => ({
              "--tw-enter-translate-x": value
            }),
            "slide-out-to-top": (value) => ({
              "--tw-exit-translate-y": `-${value}`
            }),
            "slide-out-to-bottom": (value) => ({
              "--tw-exit-translate-y": value
            }),
            "slide-out-to-left": (value) => ({
              "--tw-exit-translate-x": `-${value}`
            }),
            "slide-out-to-right": (value) => ({
              "--tw-exit-translate-x": value
            })
          },
          { values: theme("animationTranslate") }
        );
        matchUtilities(
          { duration: (value) => ({ animationDuration: value }) },
          { values: filterDefault(theme("animationDuration")) }
        );
        matchUtilities(
          { delay: (value) => ({ animationDelay: value }) },
          { values: theme("animationDelay") }
        );
        matchUtilities(
          { ease: (value) => ({ animationTimingFunction: value }) },
          { values: filterDefault(theme("animationTimingFunction")) }
        );
        addUtilities({
          ".running": { animationPlayState: "running" },
          ".paused": { animationPlayState: "paused" }
        });
        matchUtilities(
          { "fill-mode": (value) => ({ animationFillMode: value }) },
          { values: theme("animationFillMode") }
        );
        matchUtilities(
          { direction: (value) => ({ animationDirection: value }) },
          { values: theme("animationDirection") }
        );
        matchUtilities(
          { repeat: (value) => ({ animationIterationCount: value }) },
          { values: theme("animationRepeat") }
        );
      },
      {
        theme: {
          extend: {
            animationDelay: ({ theme }) => ({
              ...theme("transitionDelay")
            }),
            animationDuration: ({ theme }) => ({
              0: "0ms",
              ...theme("transitionDuration")
            }),
            animationTimingFunction: ({ theme }) => ({
              ...theme("transitionTimingFunction")
            }),
            animationFillMode: {
              none: "none",
              forwards: "forwards",
              backwards: "backwards",
              both: "both"
            },
            animationDirection: {
              normal: "normal",
              reverse: "reverse",
              alternate: "alternate",
              "alternate-reverse": "alternate-reverse"
            },
            animationOpacity: ({ theme }) => ({
              DEFAULT: 0,
              ...theme("opacity")
            }),
            animationTranslate: ({ theme }) => ({
              DEFAULT: "100%",
              ...theme("translate")
            }),
            animationScale: ({ theme }) => ({
              DEFAULT: 0,
              ...theme("scale")
            }),
            animationRotate: ({ theme }) => ({
              DEFAULT: "30deg",
              ...theme("rotate")
            }),
            animationRepeat: {
              0: "0",
              1: "1",
              infinite: "infinite"
            },
            keyframes: {
              enter: {
                from: {
                  opacity: "var(--tw-enter-opacity, 1)",
                  transform: "translate3d(var(--tw-enter-translate-x, 0), var(--tw-enter-translate-y, 0), 0) scale3d(var(--tw-enter-scale, 1), var(--tw-enter-scale, 1), var(--tw-enter-scale, 1)) rotate(var(--tw-enter-rotate, 0))"
                }
              },
              exit: {
                to: {
                  opacity: "var(--tw-exit-opacity, 1)",
                  transform: "translate3d(var(--tw-exit-translate-x, 0), var(--tw-exit-translate-y, 0), 0) scale3d(var(--tw-exit-scale, 1), var(--tw-exit-scale, 1), var(--tw-exit-scale, 1)) rotate(var(--tw-exit-rotate, 0))"
                }
              }
            }
          }
        }
      }
    );
  }
});

// src/plugins/index.ts
var import_plugin = __toESM(require_plugin(), 1);
var import_tailwindcss_animate = __toESM(require_tailwindcss_animate(), 1);
import hexRgb from "hex-rgb";
function getRgbChannels(hex) {
  const { red, green, blue } = hexRgb(hex);
  return `${red} ${green} ${blue}`;
}
var mtConfig = import_plugin.default.withOptions(
  function(options) {
    return function({ addBase }) {
      addBase({
        ":root": {
          /* border radius */
          "--radius": options?.radius || "1.5rem",
          /* fonts */
          "--font-sans": options?.fonts?.sans || "Inter",
          "--font-serif": options?.fonts?.serif || "",
          "--font-mono": options?.fonts?.mono || "Fira Code",
          /* base colors */
          "--color-background": getRgbChannels(
            options?.colors?.background || "#ffffff"
          ),
          "--color-foreground": getRgbChannels(
            options?.colors?.foreground || "#475569"
          ),
          "--color-black": getRgbChannels(options?.colors?.black || "#020617"),
          "--color-white": getRgbChannels(options?.colors?.white || "#ffffff"),
          /* surface color */
          "--color-surface": getRgbChannels(
            options?.colors?.surface?.default || "#e2e8f0"
          ),
          "--color-surface-dark": getRgbChannels(
            options?.colors?.surface?.dark || "#cbd5e1"
          ),
          "--color-surface-light": getRgbChannels(
            options?.colors?.surface?.light || "#f1f5f9"
          ),
          "--color-surface-foreground": getRgbChannels(
            options?.colors?.surface?.foreground || "#020617"
          ),
          /* primary color */
          "--color-primary": getRgbChannels(
            options?.colors?.primary?.default || "#1e293b"
          ),
          "--color-primary-dark": getRgbChannels(
            options?.colors?.primary?.dark || "#0f172a"
          ),
          "--color-primary-light": getRgbChannels(
            options?.colors?.primary?.light || "#334155"
          ),
          "--color-primary-foreground": getRgbChannels(
            options?.colors?.primary?.foreground || "#f8fafc"
          ),
          /* secondary color */
          "--color-secondary": getRgbChannels(
            options?.colors?.secondary?.default || "#e2e8f0"
          ),
          "--color-secondary-dark": getRgbChannels(
            options?.colors?.secondary?.dark || "#cbd5e1"
          ),
          "--color-secondary-light": getRgbChannels(
            options?.colors?.secondary?.light || "#f1f5f9"
          ),
          "--color-secondary-foreground": getRgbChannels(
            options?.colors?.secondary?.foreground || "#020617"
          ),
          /* info color */
          "--color-info": getRgbChannels(
            options?.colors?.info?.default || "#0062ff"
          ),
          "--color-info-dark": getRgbChannels(
            options?.colors?.info?.dark || "#0055dd"
          ),
          "--color-info-light": getRgbChannels(
            options?.colors?.info?.light || "#007aff"
          ),
          "--color-info-foreground": getRgbChannels(
            options?.colors?.info?.foreground || "#f8fafc"
          ),
          /* success color */
          "--color-success": getRgbChannels(
            options?.colors?.success?.default || "#00bf6b"
          ),
          "--color-success-dark": getRgbChannels(
            options?.colors?.success?.dark || "#00a35f"
          ),
          "--color-success-light": getRgbChannels(
            options?.colors?.success?.light || "#02e585"
          ),
          "--color-success-foreground": getRgbChannels(
            options?.colors?.success?.foreground || "#f8fafc"
          ),
          /* warning color */
          "--color-warning": getRgbChannels(
            options?.colors?.warning?.default || "#fca327"
          ),
          "--color-warning-dark": getRgbChannels(
            options?.colors?.warning?.dark || "#f67d0a"
          ),
          "--color-warning-light": getRgbChannels(
            options?.colors?.warning?.light || "#fdba4c"
          ),
          "--color-warning-foreground": getRgbChannels(
            options?.colors?.warning?.foreground || "#f8fafc"
          ),
          /* error color */
          "--color-error": getRgbChannels(
            options?.colors?.error?.default || "#ef4444"
          ),
          "--color-error-dark": getRgbChannels(
            options?.colors?.error?.dark || "#dc2626"
          ),
          "--color-error-light": getRgbChannels(
            options?.colors?.error?.light || "#f87171"
          ),
          "--color-error-foreground": getRgbChannels(
            options?.colors?.error?.foreground || "#f8fafc"
          )
        },
        ".dark": {
          /* base colors */
          "--color-background": getRgbChannels(
            options?.darkColors?.background || "#020617"
          ),
          "--color-foreground": getRgbChannels(
            options?.darkColors?.foreground || "#94a3b8"
          ),
          "--color-black": getRgbChannels(
            options?.darkColors?.black || "#020617"
          ),
          "--color-white": getRgbChannels(
            options?.darkColors?.white || "#ffffff"
          ),
          /* surface color */
          "--color-surface": getRgbChannels(
            options?.darkColors?.surface?.default || "#1e293b"
          ),
          "--color-surface-dark": getRgbChannels(
            options?.darkColors?.surface?.dark || "#0f172a"
          ),
          "--color-surface-light": getRgbChannels(
            options?.darkColors?.surface?.light || "#334155"
          ),
          "--color-surface-foreground": getRgbChannels(
            options?.darkColors?.surface?.foreground || "#f8fafc"
          ),
          /* primary color */
          "--color-primary": getRgbChannels(
            options?.darkColors?.primary?.default || "#e2e8f0"
          ),
          "--color-primary-dark": getRgbChannels(
            options?.darkColors?.primary?.dark || "#cbd5e1"
          ),
          "--color-primary-light": getRgbChannels(
            options?.darkColors?.primary?.light || "#f1f5f9"
          ),
          "--color-primary-foreground": getRgbChannels(
            options?.darkColors?.primary?.foreground || "#020617"
          ),
          /* secondary color */
          "--color-secondary": getRgbChannels(
            options?.darkColors?.secondary?.default || "#1e293b"
          ),
          "--color-secondary-dark": getRgbChannels(
            options?.darkColors?.secondary?.dark || "#0f172a"
          ),
          "--color-secondary-light": getRgbChannels(
            options?.darkColors?.secondary?.light || "#334155"
          ),
          "--color-secondary-foreground": getRgbChannels(
            options?.darkColors?.secondary?.foreground || "#f8fafc"
          ),
          /* info color */
          "--color-info": getRgbChannels(
            options?.darkColors?.info?.default || "#0062ff"
          ),
          "--color-info-dark": getRgbChannels(
            options?.darkColors?.info?.dark || "#0055dd"
          ),
          "--color-info-light": getRgbChannels(
            options?.darkColors?.info?.light || "#007aff"
          ),
          "--color-info-foreground": getRgbChannels(
            options?.darkColors?.info?.foreground || "#f8fafc"
          ),
          /* success color */
          "--color-success": getRgbChannels(
            options?.darkColors?.success?.default || "#00bf6b"
          ),
          "--color-success-dark": getRgbChannels(
            options?.darkColors?.success?.dark || "#00a35f"
          ),
          "--color-success-light": getRgbChannels(
            options?.darkColors?.success?.light || "#02e585"
          ),
          "--color-success-foreground": getRgbChannels(
            options?.darkColors?.success?.foreground || "#f8fafc"
          ),
          /* warning color */
          "--color-warning": getRgbChannels(
            options?.darkColors?.warning?.default || "#fca327"
          ),
          "--color-warning-dark": getRgbChannels(
            options?.darkColors?.warning?.dark || "#f67d0a"
          ),
          "--color-warning-light": getRgbChannels(
            options?.darkColors?.warning?.light || "#fdba4c"
          ),
          "--color-warning-foreground": getRgbChannels(
            options?.darkColors?.warning?.foreground || "#f8fafc"
          ),
          /* error color */
          "--color-error": getRgbChannels(
            options?.darkColors?.error?.default || "#ef4444"
          ),
          "--color-error-dark": getRgbChannels(
            options?.darkColors?.error?.dark || "#dc2626"
          ),
          "--color-error-light": getRgbChannels(
            options?.darkColors?.error?.light || "#f87171"
          ),
          "--color-error-foreground": getRgbChannels(
            options?.darkColors?.error?.foreground || "#f8fafc"
          )
        }
      });
    };
  },
  function(options) {
    return {
      darkMode: "class",
      content: [
        "./node_modules/@material-tailwind/react/src/components/**/*.{js,ts,jsx,tsx}",
        "./node_modules/@material-tailwind/react/src/theme/**/*.{js,ts,jsx,tsx}"
      ],
      theme: {
        extend: {
          fontFamily: {
            sans: ["var(--font-sans)", "sans-serif"],
            serif: ["var(--font-serif)", "serif"],
            body: ["var(--font-sans)", "sans-serif"],
            mono: ["var(--font-mono)", "monospace"]
          },
          borderRadius: {
            full: "calc(var(--radius) * 1000)",
            "3xl": "var(--radius)",
            "2xl": "calc(var(--radius) - 8px)",
            xl: "calc(var(--radius) - 12px)",
            lg: "calc(var(--radius) - 16px)",
            md: "calc(var(--radius) - 18px)",
            DEFAULT: "calc(var(--radius) - 20px)",
            sm: "calc(var(--radius) - 22px)"
          },
          colors: {
            background: "rgb(var(--color-background) / <alpha-value>)",
            foreground: "rgb(var(--color-foreground) / <alpha-value>)",
            black: "rgb(var(--color-black) / <alpha-value>)",
            white: "rgb(var(--color-white) / <alpha-value>)",
            surface: {
              DEFAULT: "rgb(var(--color-surface) / <alpha-value>)",
              dark: "rgb(var(--color-surface-dark) / <alpha-value>)",
              light: "rgb(var(--color-surface-light) / <alpha-value>)",
              foreground: "rgb(var(--color-surface-foreground) / <alpha-value>)"
            },
            primary: {
              DEFAULT: "rgb(var(--color-primary) / <alpha-value>)",
              dark: "rgb(var(--color-primary-dark) / <alpha-value>)",
              light: "rgb(var(--color-primary-light) / <alpha-value>)",
              foreground: "rgb(var(--color-primary-foreground) / <alpha-value>)"
            },
            secondary: {
              DEFAULT: "rgb(var(--color-secondary) / <alpha-value>)",
              dark: "rgb(var(--color-secondary-dark) / <alpha-value>)",
              light: "rgb(var(--color-secondary-light) / <alpha-value>)",
              foreground: "rgb(var(--color-secondary-foreground) / <alpha-value>)"
            },
            info: {
              DEFAULT: "rgb(var(--color-info) / <alpha-value>)",
              dark: "rgb(var(--color-info-dark) / <alpha-value>)",
              light: "rgb(var(--color-info-light) / <alpha-value>)",
              foreground: "rgb(var(--color-info-foreground) / <alpha-value>)"
            },
            success: {
              DEFAULT: "rgb(var(--color-success) / <alpha-value>)",
              dark: "rgb(var(--color-success-dark) / <alpha-value>)",
              light: "rgb(var(--color-success-light) / <alpha-value>)",
              foreground: "rgb(var(--color-success-foreground) / <alpha-value>)"
            },
            warning: {
              DEFAULT: "rgb(var(--color-warning) / <alpha-value>)",
              dark: "rgb(var(--color-warning-dark) / <alpha-value>)",
              light: "rgb(var(--color-warning-light) / <alpha-value>)",
              foreground: "rgb(var(--color-warning-foreground) / <alpha-value>)"
            },
            error: {
              DEFAULT: "rgb(var(--color-error) / <alpha-value>)",
              dark: "rgb(var(--color-error-dark) / <alpha-value>)",
              light: "rgb(var(--color-error-light) / <alpha-value>)",
              foreground: "rgb(var(--color-error-foreground) / <alpha-value>)"
            }
          }
        }
      },
      plugins: [import_tailwindcss_animate.default]
    };
  }
);
var plugins_default = mtConfig;

export {
  mtConfig,
  plugins_default
};
